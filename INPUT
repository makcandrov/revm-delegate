crate_ident = revm_delegate;
crate_impl_ident = revm_delegate_impl;
macro_ident = RevmDelegate;
macro_helper_ident = revm_delegate;

dependencies = [
    revm
];

traits = {
    pub trait ::revm::Inspector<DB: ::revm::Database> {
        fn initialize_interp(&mut self, interp: &mut ::revm::interpreter::Interpreter, context: &mut ::revm::EvmContext<DB>);
        fn step(&mut self, interp: &mut ::revm::interpreter::Interpreter, context: &mut ::revm::EvmContext<DB>);
        fn step_end(&mut self, interp: &mut ::revm::interpreter::Interpreter, context: &mut ::revm::EvmContext<DB>);
        fn log(&mut self, context: &mut ::revm::EvmContext<DB>, log: &::revm::primitives::Log);
        fn call(
            &mut self,
            context: &mut ::revm::EvmContext<DB>,
            inputs: &mut ::revm::interpreter::CallInputs,
            return_memory_offset: ::core::ops::Range<usize>,
        ) -> ::std::option::Option<::revm::interpreter::CallOutcome>;
        fn call_end(
            &mut self,
            context: &mut ::revm::EvmContext<DB>,
            inputs: &::revm::interpreter::CallInputs,
            outcome: ::revm::interpreter::CallOutcome,
        ) -> ::revm::interpreter::CallOutcome;
        fn create(
            &mut self,
            context: &mut ::revm::EvmContext<DB>,
            inputs: &mut ::revm::interpreter::CreateInputs,
        ) -> ::std::option::Option<::revm::interpreter::CreateOutcome>;
        fn create_end(
            &mut self,
            context: &mut ::revm::EvmContext<DB>,
            inputs: &::revm::interpreter::CreateInputs,
            outcome: ::revm::interpreter::CreateOutcome,
        ) -> ::revm::interpreter::CreateOutcome;
        fn selfdestruct(&mut self, contract: ::revm::primitives::Address, target: ::revm::primitives::Address, value: ::revm::primitives::U256);
    }

    pub trait ::revm::Database {
        fn basic(&mut self, address: ::revm::primitives::Address) ->::std::result::Result<::std::option::Option<::revm::primitives::AccountInfo>, Self::Error>;
        fn block_hash(&mut self, number: ::revm::primitives::U256) ->::std::result::Result<::revm::primitives::B256, Self::Error>;
        fn code_by_hash(&mut self, code_hash: ::revm::primitives::B256) ->::std::result::Result<::revm::primitives::Bytecode, Self::Error>;
        fn storage(&mut self, address: ::revm::primitives::Address, index: ::revm::primitives::U256) -> ::std::result::Result<::revm::primitives::U256, Self::Error>;
    }

    pub trait ::revm::DatabaseCommit {
        fn commit(&mut self, changes: ::revm::precompile::HashMap<::revm::primitives::Address, ::revm::primitives::Account>);
    }

    pub trait ::revm::DatabaseRef {
        fn basic_ref(&self, address: ::revm::primitives::Address) ->::std::result::Result<::std::option::Option<::revm::primitives::AccountInfo>, Self::Error>;
        fn block_hash_ref(&self, number: ::revm::primitives::U256) ->::std::result::Result<::revm::primitives::B256, Self::Error>;
        fn code_by_hash_ref(&self, code_hash: ::revm::primitives::B256) ->::std::result::Result<revm::primitives::Bytecode, Self::Error>;
        fn storage_ref(&self, address: ::revm::primitives::Address, index: ::revm::primitives::U256) ->::std::result::Result<::revm::primitives::U256, Self::Error>;
    }
};
